import numpy as np
import matplotlib.pyplot as plt


def cost_function_J(y, h_theta, m):
    J = (1/(2*m)) * (np.sum((h_theta - y) * 2))
    return J


def gradient(m, X, alpha, theta, y):
    for _ in range(1500):
        theta = theta - (alpha/m) * np.sum(X[:,1] * (X.dot(theta.transpose()) - y))
        print("New cost: " + str(cost_function_J(y, X.dot(theta.transpose()), m)))
        print("Theta: " + str(theta) + '\n')
    return theta


def plot_hypothesis(theta, X):
    x = range(8)
    y = []
    for n in x:
        y.append((theta[0][0] + theta[0][1] * n))
    plt.plot(x, y)


X = np.array([[1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7]])
y = np.array([[2], [4], [6], [8], [10], [12], [14], [16]])
theta = np.array([[0, 0]])
h_theta = X.dot(theta.transpose())
m = np.size(y)
alpha = 0.01
print(theta - (0.01/m) * sum((X.dot(theta.transpose()) - y) * X))

print(X.dot(theta.transpose()))



theta_f = gradient(m, X, 0.001, theta, y)

plt.plot(X[:, 1], y, 'X', color='red')
plot_hypothesis(theta_f, X)

plt.show()
